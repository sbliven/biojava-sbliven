package org.biojava.nbio.structure.symmetry.core;

import java.util.List;

import javax.vecmath.Matrix4d;

import org.biojava.nbio.structure.Chain;
import org.biojava.nbio.structure.align.multiple.MultipleAlignment;

/**
 * A SymmetryGroup represents a Group of symmetry related subunits (quaternary
 * or internal). The symmetry can be rotational only (Point Group if closed),
 * translational only (repeats), or a combination of both (Helical if closed).
 * 
 * @author Spencer Bliven
 * @author Aleix Lafita
 * @since 4.1.1
 *
 */
public interface SymmetryGroup {

	/**
	 * @return The number of elements (subunits) in this SymmetryGroup.
	 */
	public int getOrder();

	/**
	 * The generators are a minimal set of operators whose combination can
	 * account for all operators.
	 * <p>
	 * All 3D SymmetryGroups can be generated by either one or two operators.
	 * 
	 * @return The list of generators
	 */
	public List<Matrix4d> getGenerators();

	/**
	 * Set one of the generator axis of the SymmetryGroup.
	 * <p>
	 * The generators are a minimal set of operators whose combination can
	 * account for all operators.
	 * 
	 * @param i
	 *            axis index
	 * @param gen
	 *            generator axis
	 */
	public void setGenerator(int i, Matrix4d gen);

	/**
	 * Get a List of all operators in this SymmetryGroup.
	 * <p>
	 * The first operator is always the identity matrix by convention.
	 * 
	 * @return A List of operators of length {@link #getOrder()}
	 */
	public List<Matrix4d> getOperators();

	/**
	 * Equivalent to <tt>{@link #getOperators()}.get(i)</tt>
	 * 
	 * @param i
	 *            index of the operator to return
	 * @return the ith operator
	 * @throws IndexOutOfBoundsException
	 *             if i < 0 or {@link #getOrder()} <= i
	 */
	public Matrix4d getOperator(int i);

	/**
	 * Decompose each operator into a product of one or more generators. For
	 * example, if {@link #getGenerators()} gives matrices [A,B], then the
	 * operator X = A^2*B would be represented by the list [2,1].
	 * <p>
	 * The identity can be represented by a List of zeros. In cases where an
	 * operator can be generated by several combinations of generators,
	 * implementations may return any of them but should prefer the shorter
	 * List (minimum number of matrices involved).
	 * <p>
	 * Due to limited precision, multiplying generators may not give exactly the
	 * same result as the corresponding element of {@link #getOperators()}. In
	 * this case, the latter matrix should be preferred.
	 * 
	 * @return A list of length {@link #getOrder()}, where each element gives
	 *         the indices of elements of {@link #getGenerators()} which should
	 *         be right multiplied to give the corresponding element of
	 *         {@link #getOperators()}.
	 */
	public List<List<Integer>> getOperatorFactors();

	/**
	 * @param i
	 *            Operator index
	 * @return The number k such that <tt>getOperator(i)^k</tt> is the identity.
	 * @throws IndexOutOfBoundsException
	 *             if i < 0 or {@link #getOrder()} <= i
	 */
	public int getOperatorOrder(int i);

	/**
	 * Get a string representing the symmetry of this SymmetryGroup, e.g. "D3"
	 * 
	 * @return Schoenflies notation for this Group
	 */
	public String getSymmetryString();

	/**
	 * Subunits are defined as indices into an external object, such as rows of
	 * a {@link MultipleAlignment} or elements of an array of {@link Chain}s.
	 * <p>
	 * This method returns a List of 2D rectangular list, where the first index
	 * (rows) correspond to the children and the columns give equivalent
	 * subunits. The outer index corresponds to the index of the Operator in
	 * which alignment is generated.
	 * <p>
	 * Each row should contain the same subunits as the child's subunits
	 * concatenated together, but their order may be changed based on this
	 * alignment's Group.
	 * 
	 * @return A list of length {@link #size()}
	 */
	public List<List<List<Integer>>> getAlignedSubunits();

	/**
	 * Return the subunit alignment required to obain Operator i.
	 * 
	 * @param i
	 * @return
	 */
	public List<List<Integer>> getAlignedSubunits(int i);

}
